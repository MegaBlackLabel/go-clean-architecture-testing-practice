// Code generated by MockGen. DO NOT EDIT.
// Source: messageRepository.go

// Package repository is a generated GoMock package.
package repository

import (
	model "github.com/MegaBlackLabel/go-clean-architecture-testing-practice/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessageRepository is a mock of MessageRepository interface
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockMessageRepository) Publish(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockMessageRepositoryMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageRepository)(nil).Publish), message)
}

// Subscribe mocks base method
func (m *MockMessageRepository) Subscribe(callback model.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMessageRepositoryMockRecorder) Subscribe(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMessageRepository)(nil).Subscribe), callback)
}
